{
  description = "A Rust web server including a NixOS module";

  # Nixpkgs / NixOS version to use.
  inputs.nixpkgs.url = "nixpkgs/nixos-21.05";

  outputs = { self, nixpkgs }:
    let
      # The content of this flake is taken from 'nix flake init -t templates#rust-web-server'
      # it has been stripped from all unneceissary parts, to have a minimal foundation.

      # Generate a user-friendly version number.
#version = "${builtins.substring 0 8 lastModifiedDate}-${self.shortRev or "dirty"}";

      # System types to support.
      supportedSystems = [ "x86_64-linux" ];

      # Helper function to generate an attrset '{ x86_64-linux = f "x86_64-linux"; ... }'.
      forAllSystems = f: nixpkgs.lib.genAttrs supportedSystems (system: f system);

      # Nixpkgs instantiated for supported system types.
      nixpkgsFor = forAllSystems (system: import nixpkgs { inherit system; });

    in {
      # Provide some binary packages for selected system types.
      packages = forAllSystems (system:
        {
          inherit (nixpkgsFor.${system}) apacheHttpd;
        });

      # The default package for 'nix build'. This makes sense if the
      # flake provides only one package or there is a clear "main"
      # package.
#defaultPackage = forAllSystems (system: self.packages.${system}.rust-web-server);

      # Provide a 'nix develop' environment for interactive hacking.
#devShell = forAllSystems (system: self.packages.${system}.rust-web-server.override { inShell = true; });

      # Tests run by 'nix flake check' and by Hydra.
      checks = forAllSystems
        (system:
          with nixpkgsFor.${system};
          {
            # TODO: write tests
		  }
        );
    };
}
